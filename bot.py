import asyncio

from aiogram.filters import Command
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder

TOKEN = "6911628405:AAGsFXSQzBiHXo-ErOkN35EpIjmrD2lUq20"
ADMIN_CHAT_ID = -1002132090045

bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot, storage=MemoryStorage())
router = Router()

# ---------- BUTTONS ----------


async def generate_application_buttons(user_id: int) -> InlineKeyboardBuilder:

    application_buttons_builder = InlineKeyboardBuilder()

    accept_button = types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_application_button_{user_id}")
    reject_button = types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_application_button_{user_id}")

    application_buttons_builder.row(accept_button, reject_button)

    return application_buttons_builder
# -----------------------------


class ApplicationsStates(StatesGroup):
    choosing_age = State()
    choosing_work_time = State()
    choosing_income = State()


@router.message(Command("start"))
async def start(message: types.Message):
    builder = InlineKeyboardBuilder()
    agree_button = types.InlineKeyboardButton(text="‚úÖ –î–∞, —è —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree_button")
    builder.row(agree_button)
    await message.answer(text=f"–ü—Ä–∏–≤–µ—Ç! –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏ —Å—É—Ç—å—é —Ä–∞–±–æ—Ç—ã: https://t.me/+wvuJe_Vpb4tiNGMy. –ï—Å–ª–∏ –∑–∞–∏–Ω—Ç—Ä–µ—Å–æ–≤–∞–Ω - –∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=builder.as_markup())


@router.callback_query(F.data == "agree_button")
async def accept_agreement(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer(text="–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(ApplicationsStates.choosing_age)


@router.message(ApplicationsStates.choosing_age)
async def age_handler(message: types.Message, state: FSMContext):
    await state.update_data(chosen_age=message.text)
    await message.answer(text="–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—ã –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ?")
    await state.set_state(ApplicationsStates.choosing_work_time)


@router.message(ApplicationsStates.choosing_work_time)
async def time_handler(message: types.Message, state: FSMContext):
    await state.update_data(chosen_time=message.text)
    await message.answer(text="–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å –Ω–∞–º–∏?")
    await state.set_state(ApplicationsStates.choosing_income)


@router.message(ApplicationsStates.choosing_income)
async def income_handler(message: types.Message, state: FSMContext):
    await state.update_data(chosen_income=message.text)
    application_data = await state.get_data()
    await message.answer(text="‚úÖ –¢–≤–æ—è –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    await bot.send_message(ADMIN_CHAT_ID, text=f"üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ üìå\n\n –û—Ç: @{message.from_user.username}\n\n üß¨ –í–æ–∑—Ä–∞—Å—Ç: {application_data.get('chosen_age')}\n\n üïî –í—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å: {application_data.get('chosen_time')}\n\n üí∞ –í –ø–ª–∞–Ω–∞—Ö –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å: {application_data.get('chosen_income')}", reply_markup=(await generate_application_buttons(message.chat.id)).as_markup())
    await state.clear()


@router.callback_query(F.data.startswith("accept_application_button_"))
async def accept_application(callback_query: types.CallbackQuery):
    application_user_id = callback_query.data.split("_")[-1]
    await bot.send_message(application_user_id, text="‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! –í—Å—Ç—É–ø–∞–π –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç –ø–æ —Å—Å—ã–ª–∫–µ: https://t.me/+cyWuTT99H0oyZDAy")


@router.callback_query(F.data.startswith("reject_application_button_"))
async def accept_application(callback_query: types.CallbackQuery):
    application_user_id = callback_query.data.split("_")[-1]
    await bot.send_message(application_user_id, text="‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")


async def main():
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
